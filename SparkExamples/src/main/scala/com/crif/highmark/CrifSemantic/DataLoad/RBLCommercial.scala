package com.crif.highmark.CrifSemantic.DataLoad
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import scala.concurrent.{Await, Future}
import scala.concurrent.duration._
import scala.concurrent.ExecutionContext.Implicits.global


object RBLCommercial extends App{
	
val spark = SparkSession.builder().appName("RBLCommercial")
.config("hive.metastore.uris", "thrift://chmcisprbdmn01.chm.intra:9083")
.config("hive.exec.dynamic.partition", "true")
.config("hive.exec.dynamic.partition.mode", "nonstrict")
.config("hive.enforce.bucketing", "true")
.config("hive.exec.max.dynamic.partitions", "20000")
.enableHiveSupport().getOrCreate()


val argument = spark.sparkContext.getConf.get("spark.driver.args").split("\\s+")
val mfi_id=argument(0)
val end_dt=argument(1)


  val trendAggr = spark.sql(s"""
SELECT 
  'T' IND, 
  CREDIT_TYPE ACCOUNT_TYPE,
  CASE WHEN CREDIT_TYPE IN('9002') THEN 'LAP' WHEN CREDIT_TYPE IN('4000') THEN 'CV' WHEN CREDIT_TYPE IN('0200', '0310') THEN 'WC' WHEN CREDIT_TYPE IN('0420', '0410', '5100', '5000') THEN 'TL' ELSE 'OTHERS' END PRODUCT_CATEGORY, 
  CASE WHEN SANCTIONED_AMOUNT <= 250000 THEN '0-2.5L' WHEN SANCTIONED_AMOUNT BETWEEN 250001 
  AND 1000000 THEN '2.5L-10L' WHEN SANCTIONED_AMOUNT BETWEEN 1000001 
  AND 1500000 THEN '10L-15L' WHEN SANCTIONED_AMOUNT BETWEEN 1500001 
  AND 2000000 THEN '15L-20L' WHEN SANCTIONED_AMOUNT BETWEEN 2000001 
  AND 2500000 THEN '20L-25L' WHEN SANCTIONED_AMOUNT BETWEEN 2500001 
  AND 4000000 THEN '25L-40L' WHEN SANCTIONED_AMOUNT BETWEEN 4000001 
  AND 5000000 THEN '40L-50L' WHEN SANCTIONED_AMOUNT BETWEEN 5000001 
  AND 10000000 THEN '50L-1Cr' WHEN SANCTIONED_AMOUNT BETWEEN 10000001 
  AND 50000000 THEN '1Cr-5Cr' WHEN SANCTIONED_AMOUNT > 50000000 THEN '>5Cr' ELSE 'NA' END TICKET_SIZE, 
  REPORTED_DT ACT_REPORTED_DT, 
  DISBURSED_DT, 
  CASE WHEN CONTRI_TYPE = 'RBL Bank' THEN 'RBL' WHEN CONTRI_TYPE = 'SBI' 
  OR CONTRI_TYPE = 'NAB' THEN 'PSUs' WHEN CONTRI_TYPE = 'HFC' 
  OR CONTRI_TYPE = 'NBF' THEN 'NBFCs' WHEN CONTRI_TYPE = 'PRB' THEN 'PVT' ELSE 'Others' END LENDER_TYPE, 
  P1_GROUP AS LENDER_TYPE1, 
  P2_GROUP AS LENDER_TYPE2, 
  MOB, 
  COUNT(ACCOUNT_KEY) TOTAL_LOANS, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') THEN ACCOUNT_KEY END
  ) ACTIVE_LOANS, 
  SUM(SANCTIONED_AMOUNT) TOTAL_DISB_AMOUNT, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') THEN SANCTIONED_AMOUNT ELSE 0 END
  ) TOTAL_ACTIV_DISB_AMOUNT, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') THEN CURRENT_BALANCE ELSE 0 END
  ) TOTAL_ACTIVE_POS, 
  COUNT(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL > (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN ACCOUNT_KEY END
  ) LOANS_NS, 
  COUNT(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL <= (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN ACCOUNT_KEY END
  ) LOANS_CURR, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) THEN ACCOUNT_KEY END
  ) LOANS_DPD_0, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 1 
    AND 30 THEN ACCOUNT_KEY END
  ) LOANS_DPD_1_30, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 31 
    AND 60 THEN ACCOUNT_KEY END
  ) LOANS_DPD_31_60, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 61 
    AND 90 THEN ACCOUNT_KEY END
  ) LOANS_DPD_61_90, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 180 THEN ACCOUNT_KEY END
  ) LOANS_DPD_91_180, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 181 
    AND 360 THEN ACCOUNT_KEY END
  ) LOANS_DPD_181_360, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 360 THEN ACCOUNT_KEY END
  ) LOANS_DPD_91_360, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 360 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_360, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 30 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_30, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 60 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_60, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 90 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_90, 
  SUM(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL > (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN CURRENT_BALANCE ELSE 0 END
  ) POS_NS, 
  SUM(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL <= (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN CURRENT_BALANCE ELSE 0 END
  ) POS_CURR, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_0, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 1 
    AND 30 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_1_30, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 31 
    AND 60 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_31_60, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 61 
    AND 90 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_61_90, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 180 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_91_180, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 181 
    AND 360 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_181_360, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 360 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_91_360, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 360 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_360, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 30 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_30, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 60 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_60, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 90 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_90 
FROM 
  (
    SELECT 
      REPORTED_DT, 
      CONTRIBUTOR_ID, 
      CREDIT_TYPE, 
      BORROWER_KEY, 
      ACCOUNT_KEY, 
      CURRENT_BALANCE, 
      SANCTIONED_AMOUNT, 
      CAST(
        CASE WHEN TRIM(DPD) IS NOT NULL 
        AND TRIM(ASSET_CLASS) IS NULL THEN NVL(
          CAST(
            CASE WHEN TRIM(DPD)= 'XXX' THEN '0' WHEN TRIM(DPD)= 'DDD' THEN '0' ELSE TRIM(DPD) END AS INT
          ), 
          0
        ) WHEN TRIM(DPD) IS NULL 
        AND TRIM(ASSET_CLASS) IS NOT NULL THEN CASE WHEN TRIM(ASSET_CLASS) = '001' THEN 0 WHEN TRIM(ASSET_CLASS) IN ('005', '006', '007', '008') THEN 31 WHEN TRIM(ASSET_CLASS) IN ('002', '012') THEN 91 WHEN TRIM(ASSET_CLASS) IN (
          '003', '004', '009', '0010', '0011'
        ) THEN 361 END WHEN TRIM(DPD) IS NOT NULL 
        AND TRIM(ASSET_CLASS) IS NOT NULL THEN CASE WHEN NVL(
          CAST(
            CASE WHEN TRIM(ASSET_CLASS) = '001' THEN 0 WHEN TRIM(ASSET_CLASS) IN ('005', '006', '007', '008') THEN 31 WHEN TRIM(ASSET_CLASS) IN ('002', '012') THEN 91 WHEN TRIM(ASSET_CLASS) IN (
              '003', '004', '009', '0010', '0011'
            ) THEN 361 ELSE TRIM(ASSET_CLASS) END AS INT
          ), 
          0
        ) <= NVL(
          CAST(
            CASE WHEN TRIM(DPD) = 'XXX' THEN '0' WHEN TRIM(DPD) = 'DDD' THEN '0' ELSE TRIM(DPD) END AS INT
          ), 
          0
        ) THEN NVL(
          CAST(
            CASE WHEN TRIM(DPD) = 'XXX' THEN '0' WHEN TRIM(DPD) = 'DDD' THEN '0' ELSE TRIM(DPD) END AS INT
          ), 
          0
        ) ELSE NVL(
          CAST(
            CASE WHEN TRIM(ASSET_CLASS) = '001' THEN 0 WHEN TRIM(ASSET_CLASS) IN ('005', '006', '007', '008') THEN 31 WHEN TRIM(ASSET_CLASS) IN ('002', '012') THEN 91 WHEN TRIM(ASSET_CLASS) IN (
              '003', '004', '009', '0010', '0011'
            ) THEN 361 ELSE TRIM(ASSET_CLASS) END AS INT
          ), 
          0
        ) END WHEN TRIM(DPD) IS NULL 
        AND TRIM(ASSET_CLASS) IS NULL THEN CASE WHEN DAS = 'S04' THEN 0 WHEN DAS = 'S05' THEN 1 ELSE 0 END END AS INT
      ) DERIVED_DPD, 
      DPD, 
      AMOUNT_OVERDUE_TOTAL, 
      CASE WHEN CLOSED_DT IS NULL 
      OR CLOSED_DT > REPORTED_DT THEN 'Y' ELSE 'N' END NOT_CLOSED_IND, 
      CLOSED_DT, 
      DAS, 
      DISBURSED_DT, 
      MOB, 
      CONTRI_TYPE, 
      P1_GROUP, 
      P2_GROUP 
    FROM 
      (
        SELECT 
          REPORTED_DT, 
          CONTRIBUTOR_ID, 
          B.CREDIT_TYPE CREDIT_TYPE, 
          BORROWER_KEY, 
          A.ACCOUNT_KEY, 
          NVL(
            ABS(CURRENT_BALANCE), 
            0
          ) CURRENT_BALANCE, 
          CASE WHEN ABS(
            COALESCE(
              SANCTIONED_AMOUNT, DRAWING_POWER, 
              CURRENT_BALANCE
            )
          )<= ABS(CURRENT_BALANCE) THEN ABS(CURRENT_BALANCE) ELSE ABS(
            COALESCE(
              SANCTIONED_AMOUNT, DRAWING_POWER, 
              CURRENT_BALANCE
            )
          ) END SANCTIONED_AMOUNT, 
          CASE WHEN TRIM(ASSET_CLASS) IN ('L01', '001', '0001') THEN '001' WHEN TRIM(ASSET_CLASS) IN ('002', '0002') THEN '002' WHEN TRIM(ASSET_CLASS) IN ('003', '0003') THEN '003' WHEN TRIM(ASSET_CLASS) IN ('004', '0004') THEN '004' WHEN TRIM(ASSET_CLASS) IN ('005', '0005') THEN '005' WHEN TRIM(ASSET_CLASS) IN ('006', '0006') THEN '006' WHEN TRIM(ASSET_CLASS) IN ('007', '0007') THEN '007' WHEN TRIM(ASSET_CLASS) IN ('008', '0008') THEN '008' WHEN TRIM(ASSET_CLASS) IN ('009', '0009') THEN '009' WHEN TRIM(ASSET_CLASS) IN ('010', '0010') THEN '010' WHEN TRIM(ASSET_CLASS) IN ('011', '0011') THEN '011' WHEN TRIM(ASSET_CLASS) IN ('012', '0012') THEN '012' ELSE TRIM(ASSET_CLASS) END ASSET_CLASS, 
          DAS, 
          NVL(
            CASE WHEN TRIM(DPD) = 'XXX' THEN '0' WHEN TRIM(DPD) = 'DDD' THEN '0' ELSE TRIM(DPD) END, 
            0
          ) DPD, 
          NVL(
            ABS(AMOUNT_OVERDUE_TOTAL), 
            0
          ) AMOUNT_OVERDUE_TOTAL, 
          NVL(LOAN_EXPIRY_DT, CLOSED_DT) CLOSED_DT, 
          LAST_DAY(B.SANCTIONED_DT) DISBURSED_DT, 
          MONTHS_BETWEEN(
            LAST_DAY(REPORTED_DT), 
            LAST_DAY(B.SANCTIONED_DT)
          ) MOB, 
          CASE WHEN CONTRIBUTOR_ID = 'PRB0000006' THEN 'RBL Bank' ELSE SUBSTR(CONTRIBUTOR_ID, 1, 3) END CONTRI_TYPE, 
          CASE WHEN CONTRIBUTOR_ID LIKE 'PRB0000006' THEN 'RBL BANK' WHEN CONTRIBUTOR_ID IN (
            'NBF0000324', 'PRB0000027', 'PRB0000001', 
            'NBF0000125', 'NBF0001009', 'NBF0000320', 
            'NBF0000297', 'FRB0000006', 'NBF0000082'
          ) THEN 'P1 GROUP' ELSE 'OTHERS' END P1_GROUP, 
          CASE WHEN CONTRIBUTOR_ID LIKE 'PRB0000006' THEN 'RBL BANK' WHEN CONTRIBUTOR_ID IN (
            'PRB0000003', 'PRB0000001', 'PRB0000027', 
            'PRB0000025', 'FRB0000006', 'PRB0000009', 
            'NBF0000082', 'NBF0000085', 'HFC0000036', 
            'NBF0001414', 'NBF0001415', 'NBF0000084', 
            'PRB0000016', 'PRB0000011'
          ) THEN 'P2 GROUP' ELSE 'OTHERS' END P2_GROUP 
        FROM 
          hmanalytics.hm_cml_account_trend A
         JOIN (SELECT ACCOUNT_KEY,SANCTIONED_DT,CREDIT_TYPE from  hmanalytics.hm_cml_account_prd) B
        ON ( A.ACCOUNT_KEY =B.ACCOUNT_KEY)
        WHERE 
          cast(B.SANCTIONED_DT as date) >= From_unixtime(
            Unix_timestamp('01-APR-13', 'dd-MMM-yy'), 
            'yyyy-MM-dd'
          ) 
          AND cast(REPORTED_DT as date) >= From_unixtime(
            Unix_timestamp('01-APR-15', 'dd-MMM-yy'), 
            'yyyy-MM-dd'
          ) 
          AND cast(REPORTED_DT as date) <= From_unixtime(
            Unix_timestamp('"""+end_dt+ """', 'dd-MMM-yy'), 
            'yyyy-MM-dd'
          )
      ) A
  ) B 
GROUP BY 
  CREDIT_TYPE,
  CASE WHEN CREDIT_TYPE IN('9002') THEN 'LAP' WHEN CREDIT_TYPE IN('4000') THEN 'CV' WHEN CREDIT_TYPE IN('0200', '0310') THEN 'WC' WHEN CREDIT_TYPE IN('0420', '0410', '5100', '5000') THEN 'TL' ELSE 'OTHERS' END , 
  CASE WHEN SANCTIONED_AMOUNT <= 250000 THEN '0-2.5L' WHEN SANCTIONED_AMOUNT BETWEEN 250001 
  AND 1000000 THEN '2.5L-10L' WHEN SANCTIONED_AMOUNT BETWEEN 1000001 
  AND 1500000 THEN '10L-15L' WHEN SANCTIONED_AMOUNT BETWEEN 1500001 
  AND 2000000 THEN '15L-20L' WHEN SANCTIONED_AMOUNT BETWEEN 2000001 
  AND 2500000 THEN '20L-25L' WHEN SANCTIONED_AMOUNT BETWEEN 2500001 
  AND 4000000 THEN '25L-40L' WHEN SANCTIONED_AMOUNT BETWEEN 4000001 
  AND 5000000 THEN '40L-50L' WHEN SANCTIONED_AMOUNT BETWEEN 5000001 
  AND 10000000 THEN '50L-1Cr' WHEN SANCTIONED_AMOUNT BETWEEN 10000001 
  AND 50000000 THEN '1Cr-5Cr' WHEN SANCTIONED_AMOUNT > 50000000 THEN '>5Cr' ELSE 'NA' END, 
  REPORTED_DT, 
  DISBURSED_DT, 
  CASE WHEN CONTRI_TYPE = 'RBL Bank' THEN 'RBL' WHEN CONTRI_TYPE = 'SBI' 
  OR CONTRI_TYPE = 'NAB' THEN 'PSUs' WHEN CONTRI_TYPE = 'HFC' 
  OR CONTRI_TYPE = 'NBF' THEN 'NBFCs' WHEN CONTRI_TYPE = 'PRB' THEN 'PVT' ELSE 'Others' END, 
  P1_GROUP, 
  P2_GROUP, 
  MOB
""")

val prodAggr = spark.sql(s"""
SELECT 
  'P' IND, 
  CREDIT_TYPE ACCOUNT_TYPE,
  CASE WHEN CREDIT_TYPE IN('9002') THEN 'LAP' WHEN CREDIT_TYPE IN('4000') THEN 'CV' WHEN CREDIT_TYPE IN('0200', '0310') THEN 'WC' WHEN CREDIT_TYPE IN('0420', '0410', '5100', '5000') THEN 'TL' ELSE 'OTHERS' END PRODUCT_CATEGORY, 
  CASE WHEN SANCTIONED_AMOUNT <= 250000 THEN '0-2.5L' WHEN SANCTIONED_AMOUNT BETWEEN 250001 
  AND 1000000 THEN '2.5L-10L' WHEN SANCTIONED_AMOUNT BETWEEN 1000001 
  AND 1500000 THEN '10L-15L' WHEN SANCTIONED_AMOUNT BETWEEN 1500001 
  AND 2000000 THEN '15L-20L' WHEN SANCTIONED_AMOUNT BETWEEN 2000001 
  AND 2500000 THEN '20L-25L' WHEN SANCTIONED_AMOUNT BETWEEN 2500001 
  AND 4000000 THEN '25L-40L' WHEN SANCTIONED_AMOUNT BETWEEN 4000001 
  AND 5000000 THEN '40L-50L' WHEN SANCTIONED_AMOUNT BETWEEN 5000001 
  AND 10000000 THEN '50L-1Cr' WHEN SANCTIONED_AMOUNT BETWEEN 10000001 
  AND 50000000 THEN '1Cr-5Cr' WHEN SANCTIONED_AMOUNT > 50000000 THEN '>5Cr' ELSE 'NA' END TICKET_SIZE, 
  REPORTED_DT ACT_REPORTED_DT, 
  DISBURSED_DT, 
  CASE WHEN CONTRI_TYPE = 'RBL Bank' THEN 'RBL' WHEN CONTRI_TYPE = 'SBI' 
  OR CONTRI_TYPE = 'NAB' THEN 'PSUs' WHEN CONTRI_TYPE = 'HFC' 
  OR CONTRI_TYPE = 'NBF' THEN 'NBFCs' WHEN CONTRI_TYPE = 'PRB' THEN 'PVT' ELSE 'Others' END LENDER_TYPE, 
  P1_GROUP AS LENDER_TYPE1, 
  P2_GROUP AS LENDER_TYPE2, 
  MOB, 
  COUNT(ACCOUNT_KEY) TOTAL_LOANS, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') THEN ACCOUNT_KEY END
  ) ACTIVE_LOANS, 
  SUM(SANCTIONED_AMOUNT) TOTAL_DISB_AMOUNT, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') THEN SANCTIONED_AMOUNT ELSE 0 END
  ) TOTAL_ACTIV_DISB_AMOUNT, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') THEN CURRENT_BALANCE ELSE 0 END
  ) TOTAL_ACTIVE_POS, 
  COUNT(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL > (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN ACCOUNT_KEY END
  ) LOANS_NS, 
  COUNT(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL <= (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN ACCOUNT_KEY END
  ) LOANS_CURR, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) THEN ACCOUNT_KEY END
  ) LOANS_DPD_0, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 1 
    AND 30 THEN ACCOUNT_KEY END
  ) LOANS_DPD_1_30, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 31 
    AND 60 THEN ACCOUNT_KEY END
  ) LOANS_DPD_31_60, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 61 
    AND 90 THEN ACCOUNT_KEY END
  ) LOANS_DPD_61_90, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 180 THEN ACCOUNT_KEY END
  ) LOANS_DPD_91_180, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 181 
    AND 360 THEN ACCOUNT_KEY END
  ) LOANS_DPD_181_360, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 360 THEN ACCOUNT_KEY END
  ) LOANS_DPD_91_360, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 360 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_360, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 30 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_30, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 60 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_60, 
  COUNT(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 90 THEN ACCOUNT_KEY END
  ) LOANS_DPD_GTR_90, 
  SUM(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL > (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN CURRENT_BALANCE ELSE 0 END
  ) POS_NS, 
  SUM(
    CASE WHEN (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) 
    AND (
      AMOUNT_OVERDUE_TOTAL <= (
        0.01 * NVL(SANCTIONED_AMOUNT, 0)
      )
    ) 
    AND (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') THEN CURRENT_BALANCE ELSE 0 END
  ) POS_CURR, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND (
      DERIVED_DPD = 0 
      OR DERIVED_DPD IS NULL
    ) THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_0, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 1 
    AND 30 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_1_30, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 31 
    AND 60 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_31_60, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 61 
    AND 90 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_61_90, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 180 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_91_180, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 181 
    AND 360 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_181_360, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD BETWEEN 91 
    AND 360 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_91_360, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN ('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 360 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_360, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 30 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_30, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 60 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_60, 
  SUM(
    CASE WHEN (NOT_CLOSED_IND = 'Y') 
    AND DAS IN('S04', 'S05', 'S20', 'S25', 'S18') 
    AND DERIVED_DPD > 90 THEN CURRENT_BALANCE ELSE 0 END
  ) POS_DPD_GTR_90 
FROM 
  (
    SELECT 
      REPORTED_DT, 
      CONTRIBUTOR_ID, 
      CREDIT_TYPE, 
      BORROWER_KEY, 
      ACCOUNT_KEY, 
      CURRENT_BALANCE, 
      SANCTIONED_AMOUNT, 
      CAST(
        CASE WHEN TRIM(DPD) IS NOT NULL 
        AND TRIM(ASSET_CLASS) IS NULL THEN NVL(
          CAST(
            CASE WHEN TRIM(DPD)= 'XXX' THEN '0' WHEN TRIM(DPD)= 'DDD' THEN '0' ELSE TRIM(DPD) END AS INT
          ), 
          0
        ) WHEN TRIM(DPD) IS NULL 
        AND TRIM(ASSET_CLASS) IS NOT NULL THEN CASE WHEN TRIM(ASSET_CLASS) = '001' THEN 0 WHEN TRIM(ASSET_CLASS) IN ('005', '006', '007', '008') THEN 31 WHEN TRIM(ASSET_CLASS) IN ('002', '012') THEN 91 WHEN TRIM(ASSET_CLASS) IN (
          '003', '004', '009', '0010', '0011'
        ) THEN 361 END WHEN TRIM(DPD) IS NOT NULL 
        AND TRIM(ASSET_CLASS) IS NOT NULL THEN CASE WHEN NVL(
          CAST(
            CASE WHEN TRIM(ASSET_CLASS) = '001' THEN 0 WHEN TRIM(ASSET_CLASS) IN ('005', '006', '007', '008') THEN 31 WHEN TRIM(ASSET_CLASS) IN ('002', '012') THEN 91 WHEN TRIM(ASSET_CLASS) IN (
              '003', '004', '009', '0010', '0011'
            ) THEN 361 ELSE TRIM(ASSET_CLASS) END AS INT
          ), 
          0
        ) <= NVL(
          CAST(
            CASE WHEN TRIM(DPD) = 'XXX' THEN '0' WHEN TRIM(DPD) = 'DDD' THEN '0' ELSE TRIM(DPD) END AS INT
          ), 
          0
        ) THEN NVL(
          CAST(
            CASE WHEN TRIM(DPD) = 'XXX' THEN '0' WHEN TRIM(DPD) = 'DDD' THEN '0' ELSE TRIM(DPD) END AS INT
          ), 
          0
        ) ELSE NVL(
          CAST(
            CASE WHEN TRIM(ASSET_CLASS) = '001' THEN 0 WHEN TRIM(ASSET_CLASS) IN ('005', '006', '007', '008') THEN 31 WHEN TRIM(ASSET_CLASS) IN ('002', '012') THEN 91 WHEN TRIM(ASSET_CLASS) IN (
              '003', '004', '009', '0010', '0011'
            ) THEN 361 ELSE TRIM(ASSET_CLASS) END AS INT
          ), 
          0
        ) END WHEN TRIM(DPD) IS NULL 
        AND TRIM(ASSET_CLASS) IS NULL THEN CASE WHEN DAS = 'S04' THEN 0 WHEN DAS = 'S05' THEN 1 ELSE 0 END END AS INT
      ) DERIVED_DPD, 
      DPD, 
      AMOUNT_OVERDUE_TOTAL, 
      CASE WHEN CLOSED_DT IS NULL 
      OR CLOSED_DT > REPORTED_DT THEN 'Y' ELSE 'N' END NOT_CLOSED_IND, 
      CLOSED_DT, 
      DAS, 
      DISBURSED_DT, 
      MOB, 
      CONTRI_TYPE, 
      P1_GROUP, 
      P2_GROUP 
    FROM 
      (
        SELECT 
          REPORTED_DT, 
          CONTRIBUTOR_ID, 
          CREDIT_TYPE, 
          BORROWER_KEY, 
          ACCOUNT_KEY, 
          NVL(
            ABS(CURRENT_BALANCE), 
            0
          ) CURRENT_BALANCE, 
          CASE WHEN ABS(
            COALESCE(
              SANCTIONED_AMOUNT, DRAWING_POWER, 
              CURRENT_BALANCE
            )
          )<= ABS(CURRENT_BALANCE) THEN ABS(CURRENT_BALANCE) ELSE ABS(
            COALESCE(
              SANCTIONED_AMOUNT, DRAWING_POWER, 
              CURRENT_BALANCE
            )
          ) END SANCTIONED_AMOUNT, 
          CASE WHEN TRIM(ASSET_CLASS) IN ('L01', '001', '0001') THEN '001' WHEN TRIM(ASSET_CLASS) IN ('002', '0002') THEN '002' WHEN TRIM(ASSET_CLASS) IN ('003', '0003') THEN '003' WHEN TRIM(ASSET_CLASS) IN ('004', '0004') THEN '004' WHEN TRIM(ASSET_CLASS) IN ('005', '0005') THEN '005' WHEN TRIM(ASSET_CLASS) IN ('006', '0006') THEN '006' WHEN TRIM(ASSET_CLASS) IN ('007', '0007') THEN '007' WHEN TRIM(ASSET_CLASS) IN ('008', '0008') THEN '008' WHEN TRIM(ASSET_CLASS) IN ('009', '0009') THEN '009' WHEN TRIM(ASSET_CLASS) IN ('010', '0010') THEN '010' WHEN TRIM(ASSET_CLASS) IN ('011', '0011') THEN '011' WHEN TRIM(ASSET_CLASS) IN ('012', '0012') THEN '012' ELSE TRIM(ASSET_CLASS) END ASSET_CLASS, 
          DAS, 
          NVL(
            CASE WHEN TRIM(DPD) = 'XXX' THEN '0' WHEN TRIM(DPD) = 'DDD' THEN '0' ELSE TRIM(DPD) END, 
            0
          ) DPD, 
          NVL(
            ABS(AMOUNT_OVERDUE_TOTAL), 
            0
          ) AMOUNT_OVERDUE_TOTAL, 
          NVL(LOAN_EXPIRY_DT, CLOSED_DT) CLOSED_DT, 
          LAST_DAY(SANCTIONED_DT) DISBURSED_DT, 
          MONTHS_BETWEEN(
            LAST_DAY(REPORTED_DT), 
            LAST_DAY(SANCTIONED_DT)
          ) MOB, 
          CASE WHEN CONTRIBUTOR_ID = 'PRB0000006' THEN 'RBL Bank' ELSE SUBSTR(CONTRIBUTOR_ID, 1, 3) END CONTRI_TYPE, 
          CASE WHEN CONTRIBUTOR_ID LIKE 'PRB0000006' THEN 'RBL BANK' WHEN CONTRIBUTOR_ID IN (
            'NBF0000324', 'PRB0000027', 'PRB0000001', 
            'NBF0000125', 'NBF0001009', 'NBF0000320', 
            'NBF0000297', 'FRB0000006', 'NBF0000082'
          ) THEN 'P1 GROUP' ELSE 'OTHERS' END P1_GROUP, 
          CASE WHEN CONTRIBUTOR_ID LIKE 'PRB0000006' THEN 'RBL BANK' WHEN CONTRIBUTOR_ID IN (
            'PRB0000003', 'PRB0000001', 'PRB0000027', 
            'PRB0000025', 'FRB0000006', 'PRB0000009', 
            'NBF0000082', 'NBF0000085', 'HFC0000036', 
            'NBF0001414', 'NBF0001415', 'NBF0000084', 
            'PRB0000016', 'PRB0000011'
          ) THEN 'P2 GROUP' ELSE 'OTHERS' END P2_GROUP 
        FROM 
          hmanalytics.hm_cml_account_prd 
        WHERE 
          ACTIVE = 1 
          AND cast(SANCTIONED_DT as date) >= From_unixtime(
            Unix_timestamp('01-APR-13', 'dd-MMM-yy'), 
            'yyyy-MM-dd'
          ) 
          AND cast(REPORTED_DT as date) >= From_unixtime(
            Unix_timestamp('01-APR-15', 'dd-MMM-yy'), 
            'yyyy-MM-dd'
          ) 
          AND cast(REPORTED_DT as date) <= From_unixtime(
            Unix_timestamp('"""+end_dt+ """', 'dd-MMM-yy'), 
            'yyyy-MM-dd'
          )
      ) A
  ) B 
GROUP BY 
  CREDIT_TYPE,
  CASE WHEN CREDIT_TYPE IN('9002') THEN 'LAP' WHEN CREDIT_TYPE IN('4000') THEN 'CV' WHEN CREDIT_TYPE IN('0200', '0310') THEN 'WC' WHEN CREDIT_TYPE IN('0420', '0410', '5100', '5000') THEN 'TL' ELSE 'OTHERS' END , 
  CASE WHEN SANCTIONED_AMOUNT <= 250000 THEN '0-2.5L' WHEN SANCTIONED_AMOUNT BETWEEN 250001 
  AND 1000000 THEN '2.5L-10L' WHEN SANCTIONED_AMOUNT BETWEEN 1000001 
  AND 1500000 THEN '10L-15L' WHEN SANCTIONED_AMOUNT BETWEEN 1500001 
  AND 2000000 THEN '15L-20L' WHEN SANCTIONED_AMOUNT BETWEEN 2000001 
  AND 2500000 THEN '20L-25L' WHEN SANCTIONED_AMOUNT BETWEEN 2500001 
  AND 4000000 THEN '25L-40L' WHEN SANCTIONED_AMOUNT BETWEEN 4000001 
  AND 5000000 THEN '40L-50L' WHEN SANCTIONED_AMOUNT BETWEEN 5000001 
  AND 10000000 THEN '50L-1Cr' WHEN SANCTIONED_AMOUNT BETWEEN 10000001 
  AND 50000000 THEN '1Cr-5Cr' WHEN SANCTIONED_AMOUNT > 50000000 THEN '>5Cr' ELSE 'NA' END, 
  REPORTED_DT, 
  DISBURSED_DT, 
  CASE WHEN CONTRI_TYPE = 'RBL Bank' THEN 'RBL' WHEN CONTRI_TYPE = 'SBI' 
  OR CONTRI_TYPE = 'NAB' THEN 'PSUs' WHEN CONTRI_TYPE = 'HFC' 
  OR CONTRI_TYPE = 'NBF' THEN 'NBFCs' WHEN CONTRI_TYPE = 'PRB' THEN 'PVT' ELSE 'Others' END, 
  P1_GROUP, 
  P2_GROUP, 
  MOB
""")
	val f1 = Future{
	trendAggr.write.mode("overwrite").saveAsTable("hmanalytics.hm_rbl_cml_trend_data")
	}
	
	val f2 = Future{
  prodAggr.write.mode("overwrite").saveAsTable("hmanalytics.hm_rbl_cml_prd_data")
	}
	
	Await.ready(f1, Duration.Inf)
	Await.ready(f2, Duration.Inf)

}